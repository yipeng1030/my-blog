<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yipeng M</title>
    <link>http://localhost:1313/my-blog/</link>
    <description>Recent content on Yipeng M</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 07 May 2025 11:22:12 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/my-blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kube-Scheduler 深度解析：从源码看 Kubernetes 调度核心</title>
      <link>http://localhost:1313/my-blog/posts/20250507/</link>
      <pubDate>Wed, 07 May 2025 11:22:12 +0800</pubDate>
      <guid>http://localhost:1313/my-blog/posts/20250507/</guid>
      <description>&lt;p&gt;Kubernetes 的 kube-scheduler 是集群的中枢决策者，负责为每一个新创建的、未指定节点的 Pod 选择最合适的运行节点。这一决策过程对集群的效率、应用性能和整体可靠性至关重要 1。本文将深入 kube-scheduler 的内部机制，通过分析其 Go 语言源代码，揭示其从启动、核心调度逻辑到高度可扩展的调度框架的演进与实现。Kubernetes 的调度器经历了从相对单一的设计到高度可扩展的调度框架的演变，这是理解其当前强大能力的关键 3。&lt;/p&gt;
&lt;p&gt;调度器的设计直接影响着集群上运行的应用程序的可用性和资源利用率。如果 Pod 被放置在不合适的节点上，可能会导致某些节点资源紧张而另一些节点资源闲置，或者违反 Pod 间的亲和性与反亲和性规则，进而影响应用的通信效率或容错能力。因此，深入理解调度器的工作原理，有助于更好地配置和排查问题，最终提升集群的整体表现。早期版本的调度器逻辑相对固定，难以满足日益增长的定制化需求 4。虽然之后引入的 Extender 机制提供了一定的扩展能力，但在性能和灵活性上仍有局限 4。调度框架的出现，允许开发者通过插件将自定义逻辑直接注入调度流程，这不仅促进了相关生态系统的繁荣，也使得核心调度器能够保持精简和易维护，同时满足多样化的调度需求，例如针对机器学习、批处理作业或需要特定硬件的工作负载 5。&lt;/p&gt;
&lt;h2 id=&#34;一-启动流程kube-scheduler-的初始化与核心组件构建&#34;&gt;一、 启动流程：Kube-Scheduler 的初始化与核心组件构建&lt;/h2&gt;
&lt;p&gt;理解 kube-scheduler 如何初始化自身及其主要数据结构，是深入其调度逻辑的前提。&lt;/p&gt;
&lt;h3 id=&#34;11-启动入口与命令解析&#34;&gt;1.1 启动入口与命令解析&lt;/h3&gt;
&lt;p&gt;kube-scheduler 的启动入口位于 &lt;code&gt;kubernetes/cmd/kube-scheduler/scheduler.go&lt;/code&gt; 文件中的 &lt;code&gt;main&lt;/code&gt; 函数 7。它利用了 Cobra 框架来处理命令行参数和应用的配置启动。具体来说，&lt;code&gt;main&lt;/code&gt; 函数会调用 &lt;code&gt;kubernetes/cmd/kube-scheduler/app/server.go&lt;/code&gt; 文件中的 &lt;code&gt;app.NewSchedulerCommand&lt;/code&gt; 函数来创建和初始化 Cobra 命令 7。&lt;/p&gt;
&lt;p&gt;随后，&lt;code&gt;runCommand&lt;/code&gt; 函数被调用，它负责编排整个启动过程，包括创建调度器配置 (&lt;code&gt;CompletedConfig&lt;/code&gt;) 和调度器实例 (&lt;code&gt;scheduler.Scheduler&lt;/code&gt;)。这一过程的核心是调用 &lt;code&gt;Setup&lt;/code&gt; 函数 7。&lt;code&gt;Setup&lt;/code&gt; 函数会验证传入的选项，根据选项创建配置，并最终调用 &lt;code&gt;scheduler.New&lt;/code&gt; 函数来实例化调度器 7。&lt;/p&gt;
&lt;p&gt;这种分层设计体现了良好的软件工程实践。&lt;code&gt;cmd/kube-scheduler/scheduler.go&lt;/code&gt; 作为顶层入口非常轻量。&lt;code&gt;cmd/kube-scheduler/app/server.go&lt;/code&gt; 负责解析命令行参数、管理配置选项，并协调 &lt;code&gt;Setup&lt;/code&gt; 过程 7。而核心的调度器对象及其复杂的初始化逻辑则封装在 &lt;code&gt;pkg/scheduler/scheduler.go&lt;/code&gt; 的 &lt;code&gt;scheduler.New&lt;/code&gt; 函数中 7。这种模块化的结构使得各部分可以独立演进和测试，例如，修改命令行参数的处理逻辑，通常不会影响到核心调度算法的实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>K8s源代码分析：Kubelet</title>
      <link>http://localhost:1313/my-blog/posts/20250506/</link>
      <pubDate>Tue, 06 May 2025 11:22:12 +0800</pubDate>
      <guid>http://localhost:1313/my-blog/posts/20250506/</guid>
      <description>&lt;h2 id=&#34;kubelet-源码解析&#34;&gt;Kubelet 源码解析&lt;/h2&gt;
&lt;p&gt;Kubelet 是 Kubernetes 集群中每个节点上运行的核心组件，它负责管理 Pod 的生命周期、与容器运行时交互、上报节点和 Pod 状态等。本文将深入分析 Kubelet 的主工作流程，从启动函数 &lt;code&gt;Run&lt;/code&gt; 开始，逐层解析其核心组件和循环机制。&lt;/p&gt;
&lt;h3 id=&#34;一kubelet的整体架构&#34;&gt;一、Kubelet的整体架构&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;20250506-4&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/my-blog/posts/20250506/20250506-4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以将 Kubelet 想象成一位勤勉的流水线工人，其核心职责便是持续不断地执行监控、任务分发与状态上报。&lt;/p&gt;
&lt;p&gt;参照示意图，Kubelet 的整个工作流程始于左上方一段有向弧线所代表的启动与初始化阶段，这里会完成所有必要的资源准备和环境设定，好比工人上岗前穿戴整齐、检查设备，为后续工作打下坚实基础。紧接着，流程便进入了名为 &amp;ldquo;SyncLoop&amp;rdquo; 的核心大循环，这是 Kubelet 的“大脑”和“双手”，负责处理所有实际的 Pod 管理任务。驱动这个主循环的是多种关键事件源，包括来自 API Server 的 Pod 指派和更新、本地静态 Pod 文件的变更、由 PLEG (Pod 生命周期事件发生器) 报告的节点上 Pod 和容器的实际状态变化，以及内部定时器触发的周期性同步、内务管理、健康探针结果和容器管理器事件更新——这些都像是工人源源不断接收到的生产指令、物料状态和设备反馈。当这些事件被触发并送达 SyncLoop 后，它会智能地根据事件的来源和类型，分派给相应的处理函数执行具体操作，如创建、更新或清理 Pod。与此同时，在 SyncLoop 右上角分布的六个并行且持续运行的辅助小循环，则构成了 Kubelet 与外界及其他组件沟通的桥梁，并负责维持关键的监听与上报机制；例如，PLEG 通过这些机制监控容器运行时事件，节点状态和心跳也借此与 API Server 保持同步和上报。因此，若 SyncLoop 在处理过程中对 Pod 状态进行了任何修改，这些变更便会通过这些辅助小循环及时上报给 API Server。&lt;/p&gt;
&lt;p&gt;接下来我们按初始化—小循环—大循环的顺序逐个分析。&lt;/p&gt;
&lt;h3 id=&#34;二kubelet-的启动与初始化kubeletrun&#34;&gt;二、Kubelet 的启动与初始化：&lt;code&gt;Kubelet.Run()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;20250506-1&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/my-blog/posts/20250506/20250506-1.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Kubelet.Run()&lt;/code&gt; 函数是整个 Kubelet 服务的起点，负责完成一系列初始化工作并启动各个后台服务和主工作循环。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;kl&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Kubelet&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;updates&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;kubetypes&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;PodUpdate&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;它的主要启动步骤包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志服务初始化&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 Kubelet 的 HTTP 日志服务，允许通过 API 访问节点上的日志文件。如果特定功能门控开启，还会支持更高级的日志查询功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API Server 客户端校验&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go并发编程实践：生产者-消费者模型的三种同步方案</title>
      <link>http://localhost:1313/my-blog/posts/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-%E4%B8%89%E7%A7%8D%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</link>
      <pubDate>Wed, 23 Apr 2025 11:22:12 +0800</pubDate>
      <guid>http://localhost:1313/my-blog/posts/go%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-%E4%B8%89%E7%A7%8D%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</guid>
      <description>&lt;p&gt;本文通过实现生产者-消费者模型，探讨Go语言中不同的并发控制方法。我们逐步分析三种方案的实现细节、技术选型和使用场景。&lt;/p&gt;
&lt;h2 id=&#34;问题定义&#34;&gt;问题定义&lt;/h2&gt;
&lt;p&gt;实现两个goroutine：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生产者：顺序发送0-4的整型数据&lt;/li&gt;
&lt;li&gt;消费者：接收并输出数据 需要正确处理channel关闭和goroutine同步&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;方案一双通道同步法&#34;&gt;&lt;strong&gt;方案一：双通道同步法&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;quit1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;quit2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 生产者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;quit1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 发送完成信号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 消费者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;pipe&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                println(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;quit1&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;quit2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 转发完成信号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;quit2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 等待最终确认&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;核心技术&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专用退出通道（quit1/quit2）&lt;/li&gt;
&lt;li&gt;多级信号传递机制&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优势&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确展示同步过程&lt;/li&gt;
&lt;li&gt;无需第三方同步原语&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺陷&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多通道增加维护成本&lt;/li&gt;
&lt;li&gt;存在goroutine泄漏风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;方案二通道关闭waitgroup法&#34;&gt;&lt;strong&gt;方案二：通道关闭+WaitGroup法&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WaitGroup&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Add&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 生产者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        close(&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// 关键关闭操作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 消费者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; { &lt;span style=&#34;color:#75715e&#34;&gt;// 自动检测关闭&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            println(&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;) 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;wg&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Wait&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;核心技术&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
